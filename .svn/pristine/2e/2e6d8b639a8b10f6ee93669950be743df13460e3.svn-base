$.fn.attrchange.extensions={disconnect:function(o){if(typeof o!=='undefined'&&o.isPhysicalDisconnect){return this.each(function(){var attrchangeMethod=$(this).data('attrchange-method');if(attrchangeMethod=='propertychange'||attrchangeMethod=='DOMAttrModified'){$(this).off(attrchangeMethod);}else if(attrchangeMethod=='Mutation Observer'){$(this).data('attrchange-obs').disconnect();}else if(attrchangeMethod=='polling'){clearInterval($(this).data('attrchange-polling-timer'));}}).removeData(['attrchange-method','attrchange-status']);}else{return this.data('attrchange-status','disconnected');}},remove:function(o){return $.fn.attrchange.extensions['disconnect'].call(this,{isPhysicalDisconnect:true});},getProperties:function(o){var attrchangeMethod=$(this).data('attrchange-method');var pollInterval=$(this).data('attrchange-pollInterval');return{method:attrchangeMethod,isPolling:(attrchangeMethod=='polling'),pollingInterval:(typeof pollInterval==='undefined')?0:parseInt(pollInterval,10),status:(typeof attrchangeMethod==='undefined')?'removed':$(this).data('attrchange-status')}},reconnect:function(o){return this.data('attrchange-status','connected');},polling:function(o){if(o.hasOwnProperty('isComputedStyle')&&o.isComputedStyle=='true'){return this.each(function(i,_this){if(!o.hasOwnProperty('properties')||Object.prototype.toString.call(o.properties)!=='[object Array]'||o.properties.length==0){return false;}
var attributes={};for(var i=0;i<o.properties.length;i++){attributes[o.properties[i]]=$(this).css(o.properties[i]);}
var _this=this;$(this).data('attrchange-polling-timer',setInterval(function(){var changes={},hasChanges=false;for(var comuptedVal,i=0;i<o.properties.length;i++){comuptedVal=$(_this).css(o.properties[i]);if(attributes[o.properties[i]]!==comuptedVal){hasChanges=true;changes[o.properties[i]]={oldValue:attributes[o.properties[i]],newValue:comuptedVal};attributes[o.properties[i]]=comuptedVal}}
if(hasChanges&&$(_this).data('attrchange-status')==='connected'){o.callback.call(_this,changes);}},(o.pollInterval)?o.pollInterval:1000)).data('attrchange-method','polling').data('attrchange-pollInterval',o.pollInterval).data('attrchange-status','connected');});}else{return this.each(function(i,_this){var attributes={};for(var attr,i=0,attrs=_this.attributes,l=attrs.length;i<l;i++){attr=attrs.item(i);attributes[attr.nodeName]=attr.nodeValue;}
$(_this).data('attrchange-polling-timer',setInterval(function(){var changes={},hasChanges=false;for(var attr,i=0,attrs=_this.attributes,l=attrs.length;i<l;i++){attr=attrs.item(i);if(attributes.hasOwnProperty(attr.nodeName)&&attributes[attr.nodeName]!=attr.nodeValue){changes[attr.nodeName]={oldValue:attributes[attr.nodeName],newValue:attr.nodeValue};hasChanges=true;}else if(!attributes.hasOwnProperty(attr.nodeName)){changes[attr.nodeName]={oldValue:'',newValue:attr.nodeValue};hasChanges=true;}
attributes[attr.nodeName]=attr.nodeValue;}
if(hasChanges&&$(_this).data('attrchange-status')==='connected'){o.callback.call(_this,changes);}},(o.pollInterval)?o.pollInterval:1000)).data('attrchange-method','polling').data('attrchange-pollInterval',o.pollInterval).data('attrchange-status','connected');});}}}